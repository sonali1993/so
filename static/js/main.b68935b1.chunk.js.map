{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fSubmit","e","preventDefault","console","log","datas","state","cakename","refs","value","act","data","push","index","setState","myForm","reset","focus","fRemove","i","splice","fEdit","fPurchase","alert","title","_this2","react_default","a","createElement","className","ref","type","placeholder","onClick","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA6FgBA,qBAzFf,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACZE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAYXQ,QAAS,SAACC,GACRA,EAAEC,iBACFC,QAAQC,IAAI,OAEZ,IAAIC,EAAMZ,EAAKa,MAAMD,MACjBE,EAASd,EAAKe,KAAKD,SAASE,MAEhC,GAAoB,IAAjBhB,EAAKa,MAAMI,IAAQ,CACrB,IAAIC,EAAK,CACTJ,YAGDF,EAAMO,KAAKD,OAGN,CAEJN,EADUZ,EAAKa,MAAMO,OACRN,SAASA,EAIvBd,EAAKqB,SAAS,CACbT,MAAMA,EACTK,IAAI,IAGFjB,EAAKe,KAAKO,OAAOC,QACjBvB,EAAKe,KAAKD,SAASU,SAxCJxB,EA2ChByB,QAAQ,SAACC,GACR,IAAId,EAAQZ,EAAKa,MAAMD,MACvBA,EAAMe,OAAOD,EAAE,GACd1B,EAAKqB,SAAS,CAChBT,MAAMA,IAEHZ,EAAKe,KAAKO,OAAOC,QAChBvB,EAAKe,KAAKD,SAASU,SAlDPxB,EAoDhB4B,MAAM,SAACF,GACJ,IAAIR,EAAKlB,EAAKa,MAAMD,MAAMc,GAC1B1B,EAAKe,KAAKD,SAASE,MAAME,EAAKJ,SAC9Bd,EAAKqB,SAAS,CACZJ,IAAI,EACJG,MAAMM,IAEV1B,EAAKe,KAAKD,SAASU,SA3DJxB,EA6DhB6B,UAAU,SAACH,GACZI,MAAM,iCA5DP9B,EAAKa,MAAM,CACVkB,MAAO,gCACPd,IAAI,EACJG,MAAM,GACNR,MAAM,IANWZ,mFAWfG,KAAKY,KAAKD,SAASU,yCAqDb,IAAAQ,EAAA7B,KACJS,EAAQT,KAAKU,MAAMD,MACvB,OACEqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,UAAKhC,KAAKU,MAAMkB,OAChBE,EAAAC,EAAAC,cAAA,QAAME,IAAI,SAASD,UAAU,UAC1BH,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOD,IAAI,WAAWE,YAAY,iBAAiBH,UAAU,cACxEH,EAAAC,EAAAC,cAAA,UAAQK,QAAS,SAAChC,GAAD,OAAKwB,EAAKzB,QAAQC,IAAI4B,UAAU,YAAjD,YAEJH,EAAAC,EAAAC,cAAA,WAECvB,EAAM6B,IAAI,SAACvB,EAAKQ,GAAN,OACTO,EAAAC,EAAAC,cAAA,MAAIO,IAAKhB,EAAGU,UAAU,UACpBV,EAAE,EADJ,IACQR,EAAKJ,SACZmB,EAAAC,EAAAC,cAAA,UAAQK,QAAS,kBAAIR,EAAKP,QAAQC,IAAIU,UAAU,gBAAhD,UACAH,EAAAC,EAAAC,cAAA,UAAQK,QAAS,kBAAIR,EAAKJ,MAAMF,IAAIU,UAAU,gBAA9C,QACAH,EAAAC,EAAAC,cAAA,UAAQK,QAAS,kBAAIR,EAAKH,UAAUH,IAAIU,UAAU,gBAAlD,wBAjFWO,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b68935b1.chunk.js","sourcesContent":["import React,{ Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n\tconstructor(props){\n       super(props);\n\tthis.state={\n\t\ttitle: 'React simple CRUD Application',\n\t\tact:0,\n\t\tindex:'',\n\t\tdatas:[]\n\t}\n  }\n  \n  componentDidMount(){\n\t   this.refs.cakename.focus();\n  }\n  fSubmit= (e) =>{\n\t   e.preventDefault();\n\t   console.log('try');\n\t   \n\t   let datas=this.state.datas;\n\t   let cakename=this.refs.cakename.value;\n\t   \n\t   if(this.state.act===0){\n\t\t   let data={\n\t\t   cakename\n\t   }\n\t   \n\t   datas.push(data);\n\t   \n\t   \n\t   }else{\n\t\t   let index=this.state.index;\n\t\t   datas[index].cakename=cakename;\n\t   }\n\t   \n\t   \n\t   this.setState({\n\t    datas:datas,\n\t\tact:0\n\t   });\n\t   \n\t   this.refs.myForm.reset();\n\t   this.refs.cakename.focus();\n  }\n  \n   fRemove=(i)=> {\n\t   let datas = this.state.datas;\n\t   datas.splice(i,1);\n\t    this.setState({\n\t\t\tdatas:datas\n\t\t});\n      this.refs.myForm.reset();\n       this.refs.cakename.focus();\n   }\n   fEdit=(i) => {\n      let data=this.state.datas[i];\n      this.refs.cakename.value=data.cakename;\n      this.setState({\n        act:1,\n        index:i\n\t  });\n\t   this.refs.cakename.focus();\n\t}\n   fPurchase=(i) =>{\n\t\talert('You have purchased this cake');\n\t}\n\trender() {\n\t\tlet datas = this.state.datas;\n\t\treturn(\n\t\t  <div className=\"App\">\n\t\t  <h2>{this.state.title}</h2>\n\t\t  <form ref=\"myForm\" className=\"myForm\">\n\t\t     <input type=\"text\" ref=\"cakename\" placeholder=\"Enter cakename\" className=\"formField\" />\n\t\t      <button onClick={(e)=>this.fSubmit(e)} className=\"myButton\"> submit</button>\n\t\t  </form>\n\t\t  <pre>\n\t\t  {\n\t\t\t  datas.map((data,i) =>\n\t\t\t   <li key={i} className=\"myList\">\n\t\t\t\t   {i+1}.{data.cakename}\n\t\t\t\t   <button onClick={()=>this.fRemove(i)} className=\"myListButton\">remove</button>\n\t\t\t\t   <button onClick={()=>this.fEdit(i)} className=\"myListButton\">edit</button>\n\t\t\t\t   <button onClick={()=>this.fPurchase(i)} className=\"myListButton\">Purchase</button>\n\t\t\t\t    \n\t\t\t\t</li>   \n\t\t  )}\n\t\t </pre>\n\t\t  </div>\n\t\t  );\n\t}\n}\n export default App;\t","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}